name: Auditor

on:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    env:
      SQLX_VERSION: 0.6.2
      SQLX_FEATURES: postgres,rustls,sqlite
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Massage sqlx features env variable...
        run: |
          TMP=${{ env.SQLX_FEATURES }}
          SQLX_FEATURES_CACHE="${TMP//,/_}"
          echo "SQLX_FEATURES_CACHE=${SQLX_FEATURES_CACHE}" >> $GITHUB_ENV

      - name: Cache sqlx-cli
        uses: actions/cache@v2
        id: cache-sqlx
        with:
          path: |
            ~/.cargo/bin/sqlx
            ~/.cargo/bin/cargo-sqlx
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_FEATURES_CACHE }}


      - name: Install sqlx-cli 
        uses: actions-rs/cargo@v1
        if: steps.cache-sqlx.outputs.cache-hit == false
        with:
          command: install 
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Migrate slurm collector sqlite database
        run: ./scripts/init_slurm_collector_sqlite.sh
          
      - name: Check sqlx-data.json is up-to-date
        run: |
          cd auditor
          # cargo sqlx prepare --check -- --lib
          cargo sqlx prepare --check -- --bin auditor

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    env:
      SQLX_VERSION: 0.6.2
      SQLX_FEATURES: postgres,rustls,sqlite
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          toolchain: beta
          override: true

      - name: Massage sqlx features env variable...
        run: |
          TMP=${{ env.SQLX_FEATURES }}
          SQLX_FEATURES_CACHE="${TMP//,/_}"
          echo "SQLX_FEATURES_CACHE=${SQLX_FEATURES_CACHE}" >> $GITHUB_ENV

      - name: Cache sqlx-cli
        uses: actions/cache@v2
        id: cache-sqlx
        with:
          path: |
            ~/.cargo/bin/sqlx
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_FEATURES_CACHE }}

      - name: Install sqlx-cli 
        uses: actions-rs/cargo@v1
        if: steps.cache-sqlx.outputs.cache-hit == false
        with:
          command: install 
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Migrate slurm collector sqlite database
        run: ./scripts/init_slurm_collector_sqlite.sh
          
      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings

  cargo-deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check ${{ matrix.checks }}

  spellcheck:
    name: Spellcheck
    runs-on: ubuntu-latest
    env:
      SPELLCHECK_VERSION: 0.12.0
    steps:
      - name: Checkout reposityor
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          toolchain: beta
          override: true

      - name: Cache cargo-spellcheck
        uses: actions/cache@v2
        id: cache-spellcheck
        with:
          path: |
            ~/.cargo/bin/cargo-spellcheck
          key: ${{ runner.os }}-spellcheck-${{ env.SPELLCHECK_VERSION }}

      - name: Install clang
        run: |
          sudo apt-get install clang

      - name: Install cargo-spellcheck
        uses: actions-rs/cargo@v1
        if: steps.cache-spellcheck.outputs.cache-hit == false
        with:
          command: install 
          args: >
            cargo-spellcheck
            --force
            --version=${{ env.SPELLCHECK_VERSION }}
            --locked

      - name: Check spelling
        run: |
          cargo spellcheck check --cfg .cargo/spellcheck.toml --recursive --code 1


  # coverage:
  #   name: Code coverage
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres:12
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: postgres
  #       ports:
  #         - 5432:5432
  #   env:
  #     SQLX_VERSION: 0.6.2
  #     SQLX_FEATURES: postgres,rustls,sqlite
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  # 
  #     - name: Install stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         override: true
  #
  #      - name: Massage sqlx features env variable...
  #        run: |
  #          TMP=${{ env.SQLX_FEATURES }}
  #          SQLX_FEATURES_CACHE="${TMP//,/_}"
  #          echo "SQLX_FEATURES_CACHE=${SQLX_FEATURES_CACHE}" >> $GITHUB_ENV
  #
  # 
  #     - name: Cache sqlx-cli
  #       uses: actions/cache@v2
  #       id: cache-sqlx
  #       with:
  #         path: |
  #           ~/.cargo/bin/sqlx
  #         key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_FEATURES_CACHE }}
  # 
  #     - name: Install sqlx-cli 
  #       uses: actions-rs/cargo@v1
  #       if: steps.cache-sqlx.outputs.cache-hit == false
  #       with:
  #         command: install 
  #         args: >
  #           sqlx-cli
  #           --force
  #           --version=${{ env.SQLX_VERSION }}
  #           --features=${{ env.SQLX_FEATURES }}
  #           --no-default-features
  #           --locked
  #     - name: Migrate database
  #       run: |
  #         sudo apt-get install libpq-dev -y
  #         SKIP_DOCKER=true ./scripts/init_db.sh
  #     - name: Run cargo-tarpaulin
  #       uses: actions-rs/tarpaulin@v0.1
  #       with:
  #         args: '--ignore-tests --avoid-cfg-tarpaulin --exclude pyargmin'
