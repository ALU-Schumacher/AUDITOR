name: pyauditor

on: [push, pull_request]

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # We need to somehow get the SQLX_OFFLINE env variable into the container.
      # Since `maturin-action` doesn't enable us to do that, we have to tell cargo
      # via its configuration.
      - name: Create fake .cargo/config.toml
        run: |
          mkdir -p .cargo
          echo -e "[env]\nSQLX_OFFLINE = \"true\"" >> .cargo/config.toml

      - name: Maturin
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          manylinux: auto
          command: build
          args: --release --sdist -o dist --interpreter python3.7 python3.8 python3.9 python3.10 --manifest-path pyauditor/Cargo.toml

      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*

  windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # We need to somehow get the SQLX_OFFLINE env variable into the container.
      # Since `maturin-action` doesn't enable us to do that, we have to tell cargo
      # via its configuration.
      # I don't know how to script this on windows (and I don't care). Therefore
      # I'll just copy the config.toml from the pyauditor directory. This may lead to 
      # problems when there is a .cargo/config.toml, which will then be overwritten.
      - name: Create fake .cargo\config.toml
        run: |
          copy pyauditor\.cargo\config.toml .cargo\config.toml
          # echo "[env]" >> .cargo\config.toml
          # Fails here, saying "echo." doesn't exist.
          # echo. >> .cargo\config.toml
          # echo "SQLX_OFFLINE = \"true\"" >> .cargo\config.toml
          # type .cargo\config.toml

      - uses: messense/maturin-action@v1
        with:
          command: build
          args: --release -o dist --interpreter python3.7 python3.8 python3.9 python3.10 --manifest-path pyauditor/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist\*

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      # We need to somehow get the SQLX_OFFLINE env variable into the container.
      # Since `maturin-action` doesn't enable us to do that, we have to tell cargo
      # via its configuration.
      - name: Create fake .cargo/config.toml
        run: |
          mkdir -p .cargo
          echo -e "[env]\nSQLX_OFFLINE = \"true\"" >> .cargo/config.toml

      - uses: messense/maturin-action@v1
        with:
          command: build
          args: --release -o dist --universal2 --interpreter python3.7 python3.8 python3.9 python3.10 --manifest-path pyauditor/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ macos, windows, linux ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *

  test:
    name: pyauditor tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    env:
      SQLX_VERSION: 0.5.7
      SQLX_FEATURES: postgres
      RUSTFLAGS: -C link-arg=-s
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('!(volumes)**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl

      - name: Cache sqlx-cli
        uses: actions/cache@v2
        id: cache-sqlx
        with:
          path: |
            ~/.cargo/bin/sqlx
            ~/.cargo/bin/cargo-sqlx
          key: ${{ runner.os }}-sqlx-${{ env.SQLX_VERSION }}-${{ env.SQLX_FEATURES }}


      - name: Install sqlx-cli 
        uses: actions-rs/cargo@v1
        if: steps.cache-sqlx.outputs.cache-hit == false
        with:
          command: install 
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}
            --features=${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Build auditor
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --bin auditor

      - name: Test pyauditor
        run: SKIP_COMPILATION=true ./scripts/test_pyauditor.sh

  docs:
    name: pyauditor docs
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('!(volumes)**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl

      - name: Build pyauditor docs
        run: ./scripts/docs_pyauditor.sh

      - name: Upload pyauditor docs
        uses: actions/upload-artifact@v2
        with:
          name: pyauditor_docs
          path: pyauditor/docs/_build/html

  upload_docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [ docs ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: pyauditor_docs
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Deploy pyauditor docs
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: pyauditor_docs
          target-folder: pyauditor
          token: ${{ secrets.GITHUB_TOKEN }}
